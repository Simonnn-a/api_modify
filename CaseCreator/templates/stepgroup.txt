    # -*- coding=utf-8 -*-
"""
{messthod_name}success运行期望成功的case
{messthod_name}faild运行期望失败的case
{messthod_name}_api_relevance运行接口关联的case（需要手动修改需要存入/取出的字段值）

self.url需要自行补充！！！！！！
是否传入header根据需求决定
其他参数可以根据需求修改

"""
import os
import json
import requests
from Gat.util.assertHelper import AssertHelper
from Gat.util.stepvaluepool import StepValuePool
from Gat.util.parameterHelper import ParameterHelper
from Gat.util.iniConfirmhelper import get_ini

ini_path=r'{ini_path}'
class {class_name}():
    def __init__(self):
        self.url=get_ini(ini_path,"url")+'{path}'
        self.header = json.loads(get_ini(ini_path,'header'))
    def {messthod_name}Success(self,parameterID):
        stepParameters = ParameterHelper.getStepParameters(parameterID)
        parameters = stepParameters['Parameters']
        expect_result = stepParameters['Expect']
        #if expect_result == None:
        #    expect_result = {'code': 0}
        res_txt = requests.{http_method}(self.url, {data_type}=parameters, headers=self.header)
        res_dict = json.loads(res_txt.text)
        print("返回值 = " + str(res_dict))
        #valuepool=StepValuePool()
        #valuepool.put_value('appId',parameters['appId'])
        #valuepool.put_value('userId',parameters['userId'])
        AssertHelper.assert_dict_contain_after_logging(expect_result, res_dict)
    def {messthod_name}Faild(self,parameterID):
        stepParameters = ParameterHelper.getStepParameters(parameterID)
        parameters = stepParameters['Parameters']
        print('Params: {}'.format(parameters))
        expect_result = stepParameters['Expect']
        #if expect_result == None:
        #    expect_result = {'code': -1}
        res_txt = requests.{http_method}(self.url, {data_type}=parameters, headers=self.header)
        res_dict = json.loads(res_txt.text)
        print("返回值 = " + str(res_dict))
        AssertHelper.assert_dict_contain_after_logging(expect_result, res_dict)
    def {messthod_name}_Api_relevance(self,parameterID):
        stepParameters = ParameterHelper.getStepParameters(parameterID)
        parameters = stepParameters['Parameters']
        #parameters["appId"] = ParameterHelper.get_selected_param(parameters,"appId")
        #parameters["userId"] =ParameterHelper.get_selected_param(parameters,"userId")
        expect_result = stepParameters['Expect']
        #if expect_result == None:
        #    expect_result = {'code': 0}
        res_txt = requests.{http_method}(self.url, {data_type}=parameters, headers=self.header)
        res_dict = json.loads(res_txt.text)
        print("返回值 = " + str(res_dict))
        #valuepool=StepValuePool()
        #valuepool.put_value('appId',parameters['appId'])
        #valuepool.put_value('userId',parameters['userId'])
        AssertHelper.assert_dict_contain_after_logging(expect_result, res_dict)

